name: Comprehensive Testing

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run tests daily at 1 AM UTC
    - cron: "0 1 * * *"
  workflow_dispatch:

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.pip-cache
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-mock coverage

      - name: Create test environment (Unix)
        if: runner.os != 'Windows'
        run: |
          echo "GEMINI_API_KEY=test_key_for_ci" > .env
          echo "GEMINI_MODEL_NAME=gemini-2.0-flash" >> .env

      - name: Create test environment (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "GEMINI_API_KEY=test_key_for_ci" | Out-File -FilePath .env -Encoding utf8
          echo "GEMINI_MODEL_NAME=gemini-2.0-flash" | Out-File -FilePath .env -Append -Encoding utf8

      - name: Run unit tests with coverage
        run: |
          python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create test environment
        run: |
          echo "GEMINI_API_KEY=test_key_for_ci" > .env
          echo "GEMINI_MODEL_NAME=gemini-2.0-flash" >> .env

      - name: Test application factory
        run: |
          python -c "
          import sys
          sys.path.insert(0, 'src')

          from app_factory import ApplicationFactory

          print('Testing ApplicationFactory...')

          try:
              app = ApplicationFactory.create_application(
                  api_key='test_key',
                  language='persian'
              )
              print('✅ Application created successfully')
          except Exception as e:
              print(f'❌ Application creation failed: {e}')
              sys.exit(1)
          "

      - name: Test file processing pipeline
        run: |
          python -c "
          import sys
          import os
          from pathlib import Path

          sys.path.insert(0, 'src')

          from services.audio_file_service import AudioFileService
          from services.configuration_service import ConfigurationService

          print('Testing file processing pipeline...')

          # Create test audio directory
          test_dir = Path('test_assets')
          test_dir.mkdir(exist_ok=True)

          config = ConfigurationService()
          file_service = AudioFileService()

          # Test supported extensions check
          extensions = config.get_supported_extensions()
          print(f'✅ Supported extensions: {extensions}')

          print('✅ Integration tests completed successfully')
          "

  docker-tests:
    name: Docker Build and Test
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t voice-to-text:test .

      - name: Test Docker image
        run: |
          # Test that the image runs without errors
          docker run --rm \
            -e GEMINI_API_KEY=test_key \
            -e GEMINI_MODEL_NAME=gemini-2.0-flash \
            voice-to-text:test python -c "
          import sys
          sys.path.insert(0, 'src')
          from services.configuration_service import ConfigurationService
          config = ConfigurationService()
          print('✅ Docker image test passed')
          print(f'API Key configured: {bool(config.get_api_key())}')
          print(f'Model: {config.get_model_name()}')
          "

      - name: Test Docker Compose
        run: |
          echo "GEMINI_API_KEY=test_key" > .env
          echo "GEMINI_MODEL_NAME=gemini-2.0-flash" >> .env

          # Test that compose file is valid
          docker-compose config

          echo "✅ Docker Compose configuration is valid"

  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install safety
        run: pip install safety

      - name: Check dependencies for security vulnerabilities
        run: |
          pip install -r requirements.txt
          safety check --json > safety-report.json || true

      - name: Upload safety report
        uses: actions/upload-artifact@v4
        with:
          name: safety-report
          path: safety-report.json
