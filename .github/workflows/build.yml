name: Build and Test (Simple)

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create test environment
        run: |
          echo "GEMINI_API_KEY=test_key_for_ci" > .env
          echo "GEMINI_MODEL_NAME=gemini-2.0-flash" >> .env

      - name: Test imports and basic functionality
        run: |
          python -c "
          import sys
          import os
          sys.path.insert(0, 'src')

          # Test imports
          try:
              from models.audio_file import AudioFile
              from models.analysis_result import AnalysisResult
              from services.configuration_service import ConfigurationService
              print('✅ All imports successful')
          except ImportError as e:
              print(f'❌ Import failed: {e}')
              sys.exit(1)

          # Test configuration service
          try:
              config = ConfigurationService(api_key='test_key', model_name='test_model')
              assert config.get_api_key() == 'test_key'
              assert config.get_model_name() == 'test_model'
              assert len(config.get_supported_extensions()) > 0
              print('✅ ConfigurationService test passed')
          except Exception as e:
              print(f'❌ ConfigurationService test failed: {e}')
              sys.exit(1)

          # Test AudioFile model
          try:
              audio_file = AudioFile(
                  file_path='/test/path.mp3',
                  file_name='path.mp3', 
                  stem_name='path',
                  format='mp3',
                  file_size=1024
              )
              assert audio_file.file_name == 'path.mp3'
              assert audio_file.format == 'mp3'
              print('✅ AudioFile model test passed')
          except Exception as e:
              print(f'❌ AudioFile model test failed: {e}')
              sys.exit(1)
              
          print('🎉 All tests passed successfully!')
          "

      - name: Test main application (dry run)
        run: |
          python -c "
          import sys
          import os
          sys.path.insert(0, 'src')

          # Test that main modules can be imported without errors
          try:
              from application import VoiceToTextApplication
              print('✅ Main application import successful')
          except ImportError as e:
              print(f'❌ Main application import failed: {e}')
              # Don't exit here as this might be expected without proper setup
          except Exception as e:
              print(f'⚠️ Main application import warning: {e}')
          "

  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black

      - name: Run Black (Code Formatting Check)
        run: |
          black --check --diff . || echo "Code formatting issues found. Run 'black .' to fix."

      - name: Run Flake8 (Basic Linting)
        run: |
          # Ignore common issues for now, focus on syntax errors
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Check Python syntax
        run: |
          python -m py_compile src/**/*.py main.py app_factory.py

  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create distribution structure
        run: |
          mkdir -p dist

      - name: Create build info
        run: |
          echo "Build completed successfully on $(date)" > dist/build-info.txt
          echo "Python version: $(python --version)" >> dist/build-info.txt
          echo "Commit: ${{ github.sha }}" >> dist/build-info.txt
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-info
          path: dist/build-info.txt
