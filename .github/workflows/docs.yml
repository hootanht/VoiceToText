name: Documentation

on:
  push:
    branches: [main]
    paths:
      - "docs/**"
      - "README.md"
      - "src/**"
  pull_request:
    branches: [main]
    paths:
      - "docs/**"
      - "README.md"
      - "src/**"
  workflow_dispatch:

jobs:
  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install documentation dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs mkdocs-material
          pip install -r requirements.txt

      - name: Create docs directory structure
        run: |
          mkdir -p docs/api

      - name: Generate API documentation
        run: |
          python << 'EOF'
          import os
          import sys
          import inspect
          from pathlib import Path

          sys.path.insert(0, 'src')

          # Import modules
          from services.configuration_service import ConfigurationService
          from services.audio_file_service import AudioFileService
          from models.audio_file import AudioFile
          from models.analysis_result import AnalysisResult

          def generate_class_docs(cls, module_name):
              '''Generate markdown documentation for a class'''
              doc = f'# {cls.__name__}\n\n'
              
              if cls.__doc__:
                  doc += f'{cls.__doc__}\n\n'
              
              doc += f'**Module:** {module_name}\n\n'
              
              # Constructor
              if hasattr(cls, '__init__') and cls.__init__.__doc__:
                  doc += '## Constructor\n\n'
                  doc += f'```python\n{cls.__name__}.__init__{inspect.signature(cls.__init__)}\n```\n\n'
                  doc += f'{cls.__init__.__doc__}\n\n'
              
              # Methods
              methods = [method for method in dir(cls) if not method.startswith('_') and callable(getattr(cls, method))]
              if methods:
                  doc += '## Methods\n\n'
                  for method_name in methods:
                      method = getattr(cls, method_name)
                      if hasattr(method, '__doc__') and method.__doc__:
                          doc += f'### {method_name}\n\n'
                          doc += f'```python\n{method_name}{inspect.signature(method)}\n```\n\n'
                          doc += f'{method.__doc__}\n\n'
              
              return doc

          # Generate documentation for each class
          classes = [
              (ConfigurationService, 'services.configuration_service'),
              (AudioFileService, 'services.audio_file_service'),
              (AudioFile, 'models.audio_file'),
              (AnalysisResult, 'models.analysis_result')
          ]

          for cls, module_name in classes:
              doc_content = generate_class_docs(cls, module_name)
              filename = f'docs/api/{cls.__name__.lower()}.md'
              with open(filename, 'w', encoding='utf-8') as f:
                  f.write(doc_content)
              print(f'Generated {filename}')
          EOF

      - name: Create simple mkdocs.yml
        run: |
          cat > mkdocs.yml << 'EOF'
          site_name: Voice to Text API Documentation
          site_description: API Documentation for Voice to Text Analyzer

          theme:
            name: material
            
          nav:
            - API Reference:
              - Configuration Service: api/configurationservice.md
              - Audio File Service: api/audiofileservice.md
              - Audio File Model: api/audiofile.md
              - Analysis Result Model: api/analysisresult.md
          EOF

      - name: Build documentation
        run: |
          mkdocs build --strict

      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: site/

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: build-docs
    if: github.ref == 'refs/heads/main'

    permissions:
      contents: read
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download documentation
        uses: actions/download-artifact@v4
        with:
          name: documentation
          path: site/

      - name: Setup Pages
        uses: actions/configure-pages@v3

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v2
        with:
          path: site/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
