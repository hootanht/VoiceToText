name: Health Monitoring

on:
  schedule:
    # Run health checks every 6 hours
    - cron: "0 */6 * * *"
  workflow_dispatch:

jobs:
  health-check:
    name: Application Health Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install requests psutil      - name: Create test environment
        run: |
          echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY || 'test_key_for_ci' }}" > .env
          echo "GEMINI_MODEL_NAME=gemini-2.0-flash" >> .env

      - name: Health Check - Dependencies
        run: |
          python -c "
          import sys
          import pkg_resources
          import json
          from datetime import datetime

          print('üîç Dependency Health Check')
          print('=' * 50)

          # Check all installed packages
          installed_packages = [d for d in pkg_resources.working_set]

          health_report = {
              'timestamp': datetime.now().isoformat(),
              'status': 'healthy',
              'total_packages': len(installed_packages),
              'packages': [],
              'issues': []
          }

          for package in sorted(installed_packages, key=lambda x: x.key):
              package_info = {
                  'name': package.key,
                  'version': package.version
              }
              health_report['packages'].append(package_info)

          # Check for security issues (mock check)
          critical_packages = ['google-genai', 'python-dotenv']
          for pkg_name in critical_packages:
              try:
                  pkg = pkg_resources.get_distribution(pkg_name)
                  print(f'‚úÖ {pkg_name}: {pkg.version}')
              except pkg_resources.DistributionNotFound:
                  print(f'‚ùå {pkg_name}: Not found')
                  health_report['issues'].append(f'{pkg_name} not found')
                  health_report['status'] = 'degraded'

          print(f'\\nüìä Total packages: {len(installed_packages)}')
          print(f'üéØ Status: {health_report[\"status\"]}')

          # Save health report
          with open('health_report.json', 'w') as f:
              json.dump(health_report, f, indent=2)
          "

      - name: Health Check - Application Services
        run: |
          python -c "
          import sys
          import os
          import time
          import traceback
          from datetime import datetime

          sys.path.insert(0, 'src')

          print('üöÄ Application Services Health Check')
          print('=' * 50)

          services_status = {
              'timestamp': datetime.now().isoformat(),
              'services': [],
              'overall_status': 'healthy'
          }

          # Test Configuration Service
          try:
              from services.configuration_service import ConfigurationService
              
              start_time = time.time()
              config = ConfigurationService()
              api_key = config.get_api_key()
              model_name = config.get_model_name()
              extensions = config.get_supported_extensions()
              end_time = time.time()
              
              services_status['services'].append({
                  'name': 'ConfigurationService',
                  'status': 'healthy',
                  'response_time_ms': round((end_time - start_time) * 1000, 3),
                  'details': {
                      'has_api_key': bool(api_key),
                      'model_name': model_name,
                      'supported_extensions_count': len(extensions)
                  }
              })
              print('‚úÖ ConfigurationService: Healthy')
              
          except Exception as e:
              services_status['services'].append({
                  'name': 'ConfigurationService',
                  'status': 'unhealthy',
                  'error': str(e),
                  'traceback': traceback.format_exc()
              })
              services_status['overall_status'] = 'unhealthy'
              print(f'‚ùå ConfigurationService: {e}')

          # Test Audio File Service
          try:
              from services.audio_file_service import AudioFileService
              
              start_time = time.time()
              audio_service = AudioFileService()
              # Create test directory
              os.makedirs('test_assets', exist_ok=True)
              files = audio_service.scan_audio_files('test_assets')
              end_time = time.time()
              
              services_status['services'].append({
                  'name': 'AudioFileService',
                  'status': 'healthy',
                  'response_time_ms': round((end_time - start_time) * 1000, 3),
                  'details': {
                      'scan_completed': True,
                      'files_found': len(files)
                  }
              })
              print('‚úÖ AudioFileService: Healthy')
              
          except Exception as e:
              services_status['services'].append({
                  'name': 'AudioFileService',
                  'status': 'unhealthy',
                  'error': str(e)
              })
              services_status['overall_status'] = 'unhealthy'
              print(f'‚ùå AudioFileService: {e}')

          # Test Models
          try:
              from models.audio_file import AudioFile
              from models.analysis_result import AnalysisResult
              
              # Test AudioFile model
              audio_file = AudioFile('test.mp3', '/path/test.mp3', 1024)
              
              # Test AnalysisResult model
              analysis = AnalysisResult(
                  'test.mp3', 'Success', 'Test content', 
                  'Test summary', datetime.now(), None
              )
              
              services_status['services'].append({
                  'name': 'Models',
                  'status': 'healthy',
                  'details': {
                      'audio_file_model': 'working',
                      'analysis_result_model': 'working'
                  }
              })
              print('‚úÖ Models: Healthy')
              
          except Exception as e:
              services_status['services'].append({
                  'name': 'Models',
                  'status': 'unhealthy',
                  'error': str(e)
              })
              services_status['overall_status'] = 'unhealthy'
              print(f'‚ùå Models: {e}')

          print(f'\\nüéØ Overall Status: {services_status[\"overall_status\"]}')

          # Save services status
          import json
          with open('services_health.json', 'w') as f:
              json.dump(services_status, f, indent=2)
          "

      - name: Health Check - System Resources
        run: |
          python -c "
          import psutil
          import json
          from datetime import datetime

          print('üíª System Resources Health Check')
          print('=' * 50)

          # Get system information
          cpu_percent = psutil.cpu_percent(interval=1)
          memory = psutil.virtual_memory()
          disk = psutil.disk_usage('/')

          system_health = {
              'timestamp': datetime.now().isoformat(),
              'cpu': {
                  'usage_percent': cpu_percent,
                  'cores': psutil.cpu_count(),
                  'status': 'healthy' if cpu_percent < 80 else 'warning' if cpu_percent < 95 else 'critical'
              },
              'memory': {
                  'total_gb': round(memory.total / 1024 / 1024 / 1024, 2),
                  'available_gb': round(memory.available / 1024 / 1024 / 1024, 2),
                  'usage_percent': memory.percent,
                  'status': 'healthy' if memory.percent < 80 else 'warning' if memory.percent < 95 else 'critical'
              },
              'disk': {
                  'total_gb': round(disk.total / 1024 / 1024 / 1024, 2),
                  'free_gb': round(disk.free / 1024 / 1024 / 1024, 2),
                  'usage_percent': round((disk.used / disk.total) * 100, 1),
                  'status': 'healthy' if (disk.used / disk.total) < 0.8 else 'warning' if (disk.used / disk.total) < 0.95 else 'critical'
              },
              'overall_status': 'healthy'
          }

          # Determine overall status
          statuses = [system_health['cpu']['status'], system_health['memory']['status'], system_health['disk']['status']]
          if 'critical' in statuses:
              system_health['overall_status'] = 'critical'
          elif 'warning' in statuses:
              system_health['overall_status'] = 'warning'

          print(f'CPU Usage: {cpu_percent}% ({system_health[\"cpu\"][\"status\"]})')
          print(f'Memory Usage: {memory.percent}% ({system_health[\"memory\"][\"status\"]})')
          print(f'Disk Usage: {system_health[\"disk\"][\"usage_percent\"]}% ({system_health[\"disk\"][\"status\"]})')
          print(f'Overall Status: {system_health[\"overall_status\"]}')

          # Save system health
          with open('system_health.json', 'w') as f:
              json.dump(system_health, f, indent=2)
          "

      - name: Generate Health Summary
        run: |
          python -c "
          import json
          import os
          from datetime import datetime

          print('üìã Health Summary Report')
          print('=' * 50)

          # Load all health reports
          reports = {}

          if os.path.exists('health_report.json'):
              with open('health_report.json', 'r') as f:
                  reports['dependencies'] = json.load(f)

          if os.path.exists('services_health.json'):
              with open('services_health.json', 'r') as f:
                  reports['services'] = json.load(f)

          if os.path.exists('system_health.json'):
              with open('system_health.json', 'r') as f:
                  reports['system'] = json.load(f)

          # Generate summary
          summary = {
              'timestamp': datetime.now().isoformat(),
              'overall_status': 'healthy',
              'reports': reports,
              'alerts': [],
              'recommendations': []
          }

          # Check for issues
          if 'dependencies' in reports and reports['dependencies']['status'] != 'healthy':
              summary['overall_status'] = 'degraded'
              summary['alerts'].append('Dependency issues detected')

          if 'services' in reports and reports['services']['overall_status'] != 'healthy':
              summary['overall_status'] = 'unhealthy'
              summary['alerts'].append('Service health issues detected')

          if 'system' in reports and reports['system']['overall_status'] != 'healthy':
              if reports['system']['overall_status'] == 'critical':
                  summary['overall_status'] = 'critical'
              elif summary['overall_status'] == 'healthy':
                  summary['overall_status'] = 'degraded'
              summary['alerts'].append(f'System resources status: {reports[\"system\"][\"overall_status\"]}')

          # Add recommendations
          if summary['overall_status'] != 'healthy':
              summary['recommendations'].append('Review detailed health reports')
              summary['recommendations'].append('Check application logs')
              summary['recommendations'].append('Monitor resource usage')

          print(f'Overall Health Status: {summary[\"overall_status\"]}')
          if summary['alerts']:
              print('Alerts:')
              for alert in summary['alerts']:
                  print(f'  ‚ö†Ô∏è {alert}')

          if summary['recommendations']:
              print('Recommendations:')
              for rec in summary['recommendations']:
                  print(f'  üí° {rec}')

          # Save summary
          with open('health_summary.json', 'w') as f:
              json.dump(summary, f, indent=2)

          # Exit with appropriate code
          if summary['overall_status'] in ['critical', 'unhealthy']:
              exit(1)
          elif summary['overall_status'] == 'degraded':
              exit(2)
          else:
              exit(0)
          "

      - name: Upload health reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: health-reports
          path: |
            health_report.json
            services_health.json
            system_health.json
            health_summary.json
          retention-days: 7

      - name: Notify on failure
        if: failure()
        run: |
          echo "üö® Health check failed!"
          echo "Check the uploaded artifacts for detailed reports."

      - name: Create issue on critical failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let summary = 'Health check failed';
            try {
              if (fs.existsSync('health_summary.json')) {
                const healthData = JSON.parse(fs.readFileSync('health_summary.json', 'utf8'));
                summary = `Health Status: ${healthData.overall_status}`;
                
                const body = `
                ## üö® Health Check Alert
                
                **Status**: ${healthData.overall_status}
                **Timestamp**: ${healthData.timestamp}
                
                ### Alerts
                ${healthData.alerts.map(alert => `- ‚ö†Ô∏è ${alert}`).join('\\n')}
                
                ### Recommendations
                ${healthData.recommendations.map(rec => `- üí° ${rec}`).join('\\n')}
                
                **Workflow**: [${context.workflow}](${context.payload.repository.html_url}/actions/runs/${context.runId})
                `;
                
                // Only create issue if status is critical
                if (healthData.overall_status === 'critical') {
                  await github.rest.issues.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: `üö® Critical Health Check Failure - ${new Date().toISOString().split('T')[0]}`,
                    body: body,
                    labels: ['health-check', 'critical', 'automated']
                  });
                }
              }
            } catch (error) {
              console.log('Could not parse health summary or create issue:', error);
            }
