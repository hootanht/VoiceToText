name: Release Automation

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., v1.0.0)"
        required: true
        type: string
      prerelease:
        description: "Mark as pre-release"
        required: false
        default: false
        type: boolean

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate version format
        run: |
          if [[ "${{ github.ref_name }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "✅ Valid version format: ${{ github.ref_name }}"
          else
            echo "❌ Invalid version format: ${{ github.ref_name }}"
            echo "Expected format: vX.Y.Z (e.g., v1.0.0)"
            exit 1
          fi

      - name: Check if version exists
        run: |
          if git tag -l | grep -q "^${{ github.ref_name }}$"; then
            echo "ℹ️ Version ${{ github.ref_name }} already exists"
          else
            echo "✅ New version: ${{ github.ref_name }}"
          fi

  build-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: validate-release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel setuptools
          pip install -r requirements.txt

      - name: Create source distribution
        run: |
          # Create setup.py for packaging
          cat > setup.py << 'EOF'
          from setuptools import setup, find_packages

          with open("README.md", "r", encoding="utf-8") as fh:
              long_description = fh.read()

          with open("requirements.txt", "r", encoding="utf-8") as fh:
              requirements = [line.strip() for line in fh if line.strip() and not line.startswith("#")]

          setup(
              name="voice-to-text-analyzer",
              version="${{ github.ref_name }}".lstrip('v'),
              author="Voice to Text Team",
              description="A modular voice to text analyzer using Google's Gemini AI",
              long_description=long_description,
              long_description_content_type="text/markdown",
              packages=find_packages(where="src"),
              package_dir={"": "src"},
              classifiers=[
                  "Development Status :: 4 - Beta",
                  "Intended Audience :: Developers",
                  "License :: OSI Approved :: MIT License",
                  "Operating System :: OS Independent",
                  "Programming Language :: Python :: 3",
                  "Programming Language :: Python :: 3.8",
                  "Programming Language :: Python :: 3.9",
                  "Programming Language :: Python :: 3.10",
                  "Programming Language :: Python :: 3.11",
              ],
              python_requires=">=3.8",
              install_requires=requirements,
              entry_points={
                  "console_scripts": [
                      "voice-to-text=main:main",
                  ],
              },
          )
          EOF

          # Build source distribution
          python setup.py sdist

      - name: Create binary distribution
        run: |
          python setup.py bdist_wheel

      - name: Create application bundle
        run: |
          # Create a complete application bundle
          mkdir -p release-bundle

          # Copy application files
          cp -r src release-bundle/
          cp main.py release-bundle/
          cp app_factory.py release-bundle/
          cp requirements.txt release-bundle/
          cp README.md release-bundle/
          cp LICENSE release-bundle/
          cp .env.example release-bundle/
          cp Dockerfile release-bundle/
          cp docker-compose.yml release-bundle/

          # Create installation script
          cat > release-bundle/install.sh << 'EOF'
          #!/bin/bash
          echo "🚀 Installing Voice to Text Analyzer..."

          # Check Python version
          if ! python3 --version | grep -E "3\.(8|9|10|11)" > /dev/null; then
            echo "❌ Python 3.8+ required"
            exit 1
          fi

          # Install dependencies
          echo "📦 Installing dependencies..."
          pip install -r requirements.txt

          # Create .env from example if it doesn't exist
          if [ ! -f .env ]; then
            cp .env.example .env
            echo "📝 Created .env file. Please edit it with your API key."
          fi

          echo "✅ Installation complete!"
          echo "💡 Edit .env file with your Gemini API key to get started."
          echo "🏃 Run: python main.py"
          EOF

          chmod +x release-bundle/install.sh

          # Create Windows installation script
          cat > release-bundle/install.bat << 'EOF'
          @echo off
          echo 🚀 Installing Voice to Text Analyzer...

          REM Check if Python is available
          python --version >nul 2>&1
          if errorlevel 1 (
              echo ❌ Python not found. Please install Python 3.8+ first.
              pause
              exit /b 1
          )

          REM Install dependencies
          echo 📦 Installing dependencies...
          pip install -r requirements.txt

          REM Create .env from example if it doesn't exist
          if not exist .env (
              copy .env.example .env
              echo 📝 Created .env file. Please edit it with your API key.
          )

          echo ✅ Installation complete!
          echo 💡 Edit .env file with your Gemini API key to get started.
          echo 🏃 Run: python main.py
          pause
          EOF

          # Create archive
          tar -czf voice-to-text-analyzer-${{ github.ref_name }}.tar.gz -C release-bundle .
          zip -r voice-to-text-analyzer-${{ github.ref_name }}.zip release-bundle/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            dist/
            *.tar.gz
            *.zip

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-artifacts

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts

      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -n "$LAST_TAG" ]; then
            echo "Generating changelog from $LAST_TAG to ${{ github.ref_name }}"
            COMMITS=$(git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD)
          else
            echo "No previous tag found, getting all commits"
            COMMITS=$(git log --pretty=format:"- %s (%h)" --max-count=20)
          fi

          # Create changelog
          cat > CHANGELOG.md << EOF
          ## 🚀 Voice to Text Analyzer ${{ github.ref_name }}

          ### 🎯 What's Changed
          $COMMITS

          ### 📦 Installation

          #### Quick Start
          \`\`\`bash
          # Download and extract
          wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/voice-to-text-analyzer-${{ github.ref_name }}.tar.gz
          tar -xzf voice-to-text-analyzer-${{ github.ref_name }}.tar.gz
          cd voice-to-text-analyzer-${{ github.ref_name }}

          # Install (Linux/macOS)
          ./install.sh

          # Or install (Windows)
          install.bat
          \`\`\`

          #### Docker
          \`\`\`bash
          docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }}
          \`\`\`

          #### Python Package
          \`\`\`bash
          pip install dist/voice_to_text_analyzer-${{ github.ref_name }}.tar.gz
          \`\`\`

          ### 🔧 Configuration
          1. Copy \`.env.example\` to \`.env\`
          2. Add your Gemini API key: \`GEMINI_API_KEY=your_api_key_here\`
          3. Run: \`python main.py\`

          ### 🐛 Bug Reports
          Please report issues at: https://github.com/${{ github.repository }}/issues

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/$LAST_TAG...${{ github.ref_name }}
          EOF

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: "Voice to Text Analyzer ${{ github.ref_name }}"
          body: ${{ steps.changelog.outputs.changelog }}
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}
          files: |
            voice-to-text-analyzer-${{ github.ref_name }}.tar.gz
            voice-to-text-analyzer-${{ github.ref_name }}.zip
            dist/*
          token: ${{ secrets.GITHUB_TOKEN }}

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: create-release

    steps:
      - name: Notify success
        run: |
          echo "🎉 Release ${{ github.ref_name }} created successfully!"
          echo "📦 Artifacts uploaded"
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
