name: Documentation

on:
  push:
    branches: [main]
    paths:
      - "docs/**"
      - "README.md"
      - "src/**"
  pull_request:
    branches: [main]
    paths:
      - "docs/**"
      - "README.md"
      - "src/**"
  workflow_dispatch:

jobs:
  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install documentation dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs mkdocs-material
          pip install -r requirements.txt

      - name: Create docs directory structure
        run: |
          mkdir -p docs/api

      - name: Generate API documentation
        run: |
          python << 'EOF'
          import os
          import sys
          import inspect
          from pathlib import Path

          sys.path.insert(0, 'src')

          try:
              from services.configuration_service import ConfigurationService
              from services.audio_file_service import AudioFileService
              from models.audio_file import AudioFile
              from models.analysis_result import AnalysisResult
          except ImportError as e:
              print(f"Import error: {e}")
              print("Creating minimal documentation...")
              
          def generate_class_docs(cls, module_name):
              doc = f'# {cls.__name__}\n\n'
              
              if cls.__doc__:
                  doc += f'{cls.__doc__}\n\n'
              else:
                  doc += f'{cls.__name__} class from {module_name}\n\n'
              
              doc += f'**Module:** {module_name}\n\n'
              
              if hasattr(cls, '__init__'):
                  doc += '## Constructor\n\n'
                  try:
                      signature = inspect.signature(cls.__init__)
                      doc += f'```python\n{cls.__name__}.__init__{signature}\n```\n\n'
                  except Exception:
                      doc += f'```python\n{cls.__name__}.__init__(...)\n```\n\n'
                  
                  if hasattr(cls.__init__, '__doc__') and cls.__init__.__doc__:
                      doc += f'{cls.__init__.__doc__}\n\n'
                  else:
                      doc += 'Constructor for the class.\n\n'
              
              methods = [method for method in dir(cls) if not method.startswith('_') and callable(getattr(cls, method))]
              if methods:
                  doc += '## Methods\n\n'
                  for method_name in methods:
                      try:
                          method = getattr(cls, method_name)
                          doc += f'### {method_name}\n\n'
                          
                          try:
                              signature = inspect.signature(method)
                              doc += f'```python\n{method_name}{signature}\n```\n\n'
                          except Exception:
                              doc += f'```python\n{method_name}(...)\n```\n\n'
                          
                          if hasattr(method, '__doc__') and method.__doc__:
                              doc += f'{method.__doc__}\n\n'
                          else:
                              doc += f'Method {method_name} of {cls.__name__}.\n\n'
                      except Exception as e:
                          print(f'Warning: Could not document method {method_name}: {e}')
                          continue
              
              return doc

          classes = [
              (ConfigurationService, 'services.configuration_service'),
              (AudioFileService, 'services.audio_file_service'),
              (AudioFile, 'models.audio_file'),
              (AnalysisResult, 'models.analysis_result')
          ]

          for cls, module_name in classes:
              try:
                  doc_content = generate_class_docs(cls, module_name)
                  filename = f'docs/api/{cls.__name__.lower()}.md'
                  with open(filename, 'w', encoding='utf-8') as f:
                      f.write(doc_content)
                  print(f'Generated {filename}')
              except Exception as e:
                  print(f'Error generating docs for {cls.__name__}: {e}')
          EOF

      - name: Create index page and mkdocs.yml
        run: |
          cat > docs/index.md << 'EOF'
          # Voice to Text API Documentation

          API documentation for the Voice to Text Analyzer application.

          ## Available APIs

          - [Configuration Service](api/configurationservice.md)
          - [Audio File Service](api/audiofileservice.md)
          - [Audio File Model](api/audiofile.md)
          - [Analysis Result Model](api/analysisresult.md)
          EOF

          cat > mkdocs.yml << 'EOF'
          site_name: Voice to Text API Documentation
          site_description: API Documentation for Voice to Text Analyzer

          theme:
            name: material
            
          nav:
            - Home: index.md
            - API Reference:
              - Configuration Service: api/configurationservice.md
              - Audio File Service: api/audiofileservice.md
              - Audio File Model: api/audiofile.md
              - Analysis Result Model: api/analysisresult.md
          EOF

      - name: Build documentation
        run: |
          echo "Generated files:"
          find docs -name "*.md" -type f

          echo "Building documentation..."
          if mkdocs build --strict; then
              echo "Documentation built successfully with strict mode"
          else
              echo "Strict mode failed, trying without strict mode..."
              mkdocs build
              echo "Documentation built successfully (with warnings)"
          fi

      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: site/

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: build-docs
    if: github.ref == 'refs/heads/main'

    permissions:
      contents: read
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download documentation
        uses: actions/download-artifact@v4
        with:
          name: documentation
          path: site/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: site/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
